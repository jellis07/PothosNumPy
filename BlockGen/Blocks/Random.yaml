random/permutation:
        name: Permutation
        class: OneToOneBlock
        categories: ["/NumPy/Random"]
        prefix: Random.NumPyRandom
        blockType: [all]
        kwargs: [useDType=False, callPostBuffer=True]
        description: "Randomly permute a sequence, or return a permuted range."

random/integers:
        name: Integers
        class: SingleOutputSource
        subclass: True
        categories: ["/NumPy/Random"]
        prefix: Random
        blockType: [int, uint]
        kwargs: [useDType=True, useShape=False, sizeParam=True, callPostBuffer=False]
        description: "Return random integers from the \"discrete uniform\" distribution of the specified dtype."
        funcArgs:
                - {name: low, dtype: blockType, testValue1: 10, testValue2: 20, badValues: [100],
                   addedValidation:
                   ["Utility.errorForLeftGERight(low, self.__high)"]}
                - {name: high, dtype: blockType, testValue1: 25, testValue2: 30, badValues: [5],
                   addedValidation:
                   ["Utility.errorForLeftGERight(self.__low, high)"]}

random/beta:
        name: Beta
        class: SingleOutputSource
        subclass: True
        categories: ["/NumPy/Random"]
        prefix: Random.NumPyRandom
        blockType: [float]
        kwargs: [useDType=False, useShape=False, sizeParam=True]
        description: "Draw samples from a Beta distribution.

The Beta distribution is a special case of the Dirichlet distribution, and is related to the Gamma distribution. It is often seen in Bayesian inference and order statistics."
        funcArgs:
                - {name: alpha, dtype: float, testValue1: 2.0, testValue2: 4.0, ">": 0.0, badValues: [0.0]}
                - {name: beta, dtype: float, testValue1: 4.0, testValue2: 2.0, ">": 0.0, badValues: [0.0]}

random/binomial:
        name: Binomial
        copy: random/beta
        description: "Draw samples from a binomial distribution.

Samples are drawn from a binomial distribution with specified parameters, <b>n</b> trials and <b>p</b> probability of success where <b>n</b> is an integer >= 0 and <b>p</b> is in the interval <b>[0,1]</b>."
        funcArgs:
                - {name: N, dtype: uint, testValue1: 0, testValue2: 1}
                - {name: P, dtype: float, testValue1: 0.25, testValue2: 0.75, ">=": 0.0, "<=": 1.0, badValues: [-0.01, 1.01]}

random/chisquare:
        name: ChiSquare
        copy: random/beta
        description: "Draw samples from a chi-square distribution.

When <b>df</b> independent random variables, each with standard normal distributions (mean 0, variance 1), are squared and summed, the resulting distribution is chi-square. This distribution is often used in hypothesis testing."
        funcArgs:
                - {name: degreesOfFreedom, dtype: float, testValue1: 0.5, testValue2: 1.0, ">": 0.0, badValues: [0.0]}

random/exponential:
        name: Exponential
        copy: random/beta
        funcArgs:
                - {name: scale, dtype: float, testValue1: 0.5, testValue2: 1.5, ">": 0.0, badValues: [0.0]}

random/f:
        name: F
        copy: random/beta
        funcArgs:
                - {name: numeratorDOF, dtype: float, testValue1: 0.5, testValue2: 1.0, ">": 0.0, badValues: [0.0]}
                - {name: denominatorDOF, dtype: float, testValue1: 0.5, testValue2: 1.0, ">": 0.0, badValues: [0.0]}

random/gamma:
        name: Gamma
        copy: random/beta
        kwargs: [useDType=False, useShape=False, sizeParam=True] # Shape parameter means something different here
        funcArgs:
                - {name: shape, dtype: float, testValue1: 0.5, testValue2: 1.0, ">": 0.0, badValues: [0.0]}
                - {name: scale, dtype: float, testValue1: 0.5, testValue2: 1.5, ">": 0.0, badValues: [0.0]}

random/geometric:
        name: Geometric
        copy: random/beta
        funcArgs:
                - {name: P, dtype: float, testValue1: 0.0, testValue2: 0.5, ">=": 0.0, "<=": 1.0, badValues: [-0.01, 1.01]}

random/gumbel:
        name: Gumbel
        copy: random/beta
        funcArgs:
                - {name: location, dtype: float, testValue1: -5.0, testValue2: 5.0}
                - {name: scale, dtype: float, testValue1: 0.5, testValue2: 1.5, ">=": 0.0, badValues: [-0.01]}

# TODO: hypergeometric, manual

random/laplace:
        name: Laplace
        copy: random/beta
        funcArgs:
                - {name: location, dtype: float, testValue1: -5.0, testValue2: 5.0}
                - {name: scale, dtype: float, testValue1: 0.5, testValue2: 1.5, ">=": 0.0, badValues: [-0.01]}

random/logistic:
        name: Logistic
        copy: random/beta
        funcArgs:
                - {name: location, dtype: float, testValue1: -5.0, testValue2: 5.0}
                - {name: scale, dtype: float, testValue1: 0.0, testValue2: 1.5, ">=": 0.0, badValues: [-0.01]}

random/lognormal:
        name: LogNormal
        copy: random/beta
        funcArgs:
                - {name: mean, dtype: float, testValue1: -5.0, testValue2: 5.0}
                - {name: sigma, dtype: float, testValue1: 0.0, testValue2: 1.5, ">=": 0.0, badValues: [-0.01]}

random/logseries:
        name: LogSeries
        copy: random/beta
        funcArgs:
                - {name: P, dtype: float, testValue1: 0.25, testValue2: 0.75, ">": 0.0, "<": 1.0, badValues: [0.0, 1.0]}

# TODO: multinomial, manual
# TODO: multivariate_normal? Is there a good way to do this?

random/negative_binomial:
        name: NegativeBinomial
        copy: random/beta
        funcArgs:
                - {name: N, dtype: float, testValue1: 0.01, testValue2: 1.0, ">": 0.0, badValues: [0.0]}
                - {name: P, dtype: float, testValue1: 0.25, testValue2: 0.75, ">=": 0.0, "<=": 1.0, badValues: [-0.01, 1.01]}

# TODO: figure out version-specific boundaries
random/noncentral_chisquare:
        name: NonCentralChisquare
        copy: random/beta
        funcArgs:
                - {name: degreesOfFreedom, dtype: float, testValue1: 0.01, testValue2: 1.0, ">": 0.0, badValues: [0.0]}
                - {name: nonCentrality, dtype: float, testValue1: 0.25, testValue2: 0.75, ">=": 0.0, badValues: [-0.01]}

# TODO: figure out version-specific boundaries
random/noncentral_f:
        name: NonCentralF
        copy: random/beta
        funcArgs:
                - {name: numeratorDOF, dtype: float, testValue1: 1.5, testValue2: 2.0, ">": 1.0, badValues: [1.0]}
                - {name: denominatorDOF, dtype: float, testValue1: 0.5, testValue2: 1.0, ">": 0.0, badValues: [0.0]}
                - {name: nonCentrality, dtype: float, testValue1: 0.25, testValue2: 0.75, ">=": 0.0, badValues: [-0.01]}

random/normal:
        name: Normal
        copy: random/beta
        funcArgs:
                - {name: location, dtype: float, testValue1: -5.0, testValue2: 5.0}
                - {name: scale, dtype: float, testValue1: 0.5, testValue2: 1.5, ">=": 0.0, badValues: [-0.01]}

random/pareto:
        name: Pareto
        copy: random/beta
        funcArgs:
                - {name: A, dtype: float, testValue1: 0.5, testValue2: 1.5, ">": 0.0, badValues: [0.0]}

# TODO: enforce mu not being within 10 sigma of int64 max?
random/poisson:
        name: Poisson
        copy: random/beta
        funcArgs:
                - {name: mu, dtype: float, testValue1: 0.0, testValue2: 0.5, ">=": 0.0, badValues: [-0.01]}

random/power:
        name: Power
        copy: random/beta
        funcArgs:
                - {name: A, dtype: float, testValue1: 1.0, testValue2: 1.5, ">=": 1.0, badValues: [0.99]}

random/rayleigh:
        name: Rayleigh
        copy: random/beta
        funcArgs:
                - {name: scale, dtype: float, testValue1: 0.0, testValue2: 1.5, ">=": 0.0, badValues: [-0.01]}

random/standard_cauchy:
        name: StandardCauchy
        copy: random/beta
        subclass: False
        funcArgs: []

# Do these need to be manual? Depends on where we automatically put the DType parameter
# TODO: standard_exponential, manual
#       standard_gamma
#       standard_normal

random/standard_t:
        name: StandardT
        copy: random/beta
        funcArgs:
                - {name: degreesOfFreedom, dtype: float, testValue1: 0.5, testValue2: 1.0, ">": 0.0, badValues: [0.0]}

# TODO: triangular, manual
#       uniform

random/vonmises:
        name: VonMises
        copy: random/beta
        funcArgs:
                - {name: mu, dtype: float, testValue1: -5.0, testValue2: 5.0}
                - {name: kappa, dtype: float, testValue1: 0.5, testValue2: 1.5, ">=": 0.0, badValues: [-0.01]}

random/wald:
        name: Wald
        copy: random/beta
        funcArgs:
                - {name: mean, dtype: float, testValue1: 0.5, testValue2: 1.5, ">": 0.0, badValues: [0.0]}
                - {name: scale, dtype: float, testValue1: 0.5, testValue2: 1.5, ">": 0.0, badValues: [0.0]}

random/weibull:
        name: Weibull
        copy: random/beta
        funcArgs:
                - {name: A, dtype: float, testValue1: 0.0, testValue2: 0.5, ">=": 0.0, badValues: [-0.01]}

random/zipf:
        name: Zipf
        copy: random/beta
        funcArgs:
                - {name: A, dtype: float, testValue1: 1.5, testValue2: 2.0, ">": 1.0, badValues: [1.0]}
